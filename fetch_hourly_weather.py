"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å 6-—á–∞—Å–æ–≤—ã–º —à–∞–≥–æ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ Open-Meteo API.

üìå –ß—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç:
1. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ CSV-—Ñ–∞–π–ª–∞ 
   —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ city, latitude –∏ longitude (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `cities_with_coordinates.csv`).
2. –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —à–∞–≥–æ–º 6 —á–∞—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
3. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ CSV-—Ñ–∞–π–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `hourly_weather.csv`).
4. –ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–µ—Å–ª–∏ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç).
5. –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ API.

üìå –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
–ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞),
—É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–º–æ—â—å—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `--output` –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª.

üêç –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
  - Python 3.10+

üì¶ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  - openmeteo-requests requests-cache retry-requests numpy pandas

üõ† –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:
--input       –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `cities_with_coordinates.csv`)
--output      –ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É CSV –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `hourly_weather.csv`)
--start       –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç), —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
--end         –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç), —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD
--delay       –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)

‚öô –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python fetch_hourly_weather.py --input '–≤—Ö.—Ñ–∞–π–ª' --output '–≤—ã—Ö–æ–¥.—Ñ–∞–π–ª' --start 2023-01-01 --end 2023-01-10 --delay 15

‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.
‚ö† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ —Å–±–æ—è—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

"""


import os
import time
import json
import argparse  
import requests
import requests_cache
import pandas as pd
from retry_requests import retry
import openmeteo_requests

def main():
    # --- –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
    parser = argparse.ArgumentParser(description="–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —à–∞–≥–æ–º 6 —á–∞—Å–æ–≤")
    parser.add_argument("--input", default="cities_with_coordinates.csv", help="–í—Ö–æ–¥–Ω–æ–π CSV —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
    parser.add_argument("--output", default="hourly_weather.csv", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--start", required=True, help="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
    parser.add_argument("--end", required=True, help="–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
    parser.add_argument("--delay", type=int, default=30, help="–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")
    args = parser.parse_args()

    input_path = args.input
    output_path = args.output
    start_date = args.start
    end_date = args.end
    delay = args.delay

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ ---
    processed_cities = set()
    if os.path.exists(output_path):
        existing_df = pd.read_csv(output_path)
        processed_cities = set(existing_df["city"].unique())
        print(f"üü° –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≥–æ—Ä–æ–¥–∞: {processed_cities}")

    data = pd.read_csv(input_path)
    data = data[~data["city"].isin(processed_cities)]

    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫—ç—à–µ–º –∏ —Ä–µ—Ç—Ä–∞—è–º–∏ ---
    cache_session = requests_cache.CachedSession('.cache', expire_after=-1)
    retry_session = retry(cache_session, retries=5, backoff_factor=0.2)
    openmeteo = openmeteo_requests.Client(session=retry_session)

    all_results = []

    for index, row in data.iterrows():
        params = {
            "latitude": row["latitude"],
            "longitude": row["longitude"],
            "start_date": start_date,
            "end_date": end_date,
            "hourly": [
                "temperature_2m", "relative_humidity_2m", "rain", "snowfall", "snow_depth",
                "is_day", "precipitation", "wind_direction_100m", "wind_speed_100m"
            ],
            "temporal_resolution": "hourly_6"
        }

        try:
            responses = openmeteo.weather_api("https://archive-api.open-meteo.com/v1/archive", params=params)
            response = responses[0]
            hourly = response.Hourly()

            hourly_data = {
                "date": pd.date_range(
                    start=pd.to_datetime(hourly.Time(), unit="s", utc=True),
                    end=pd.to_datetime(hourly.TimeEnd(), unit="s", utc=True),
                    freq=pd.Timedelta(seconds=hourly.Interval()),
                    inclusive="left"
                ),
                "city": row["city"],
                "temperature_2m": hourly.Variables(0).ValuesAsNumpy(),
                "relative_humidity_2m": hourly.Variables(1).ValuesAsNumpy(),
                "rain": hourly.Variables(2).ValuesAsNumpy(),
                "snowfall": hourly.Variables(3).ValuesAsNumpy(),
                "snow_depth": hourly.Variables(4).ValuesAsNumpy(),
                "is_day": hourly.Variables(5).ValuesAsNumpy(),
                "precipitation": hourly.Variables(6).ValuesAsNumpy(),
                "wind_direction_100m": hourly.Variables(7).ValuesAsNumpy(),
                "wind_speed_100m": hourly.Variables(8).ValuesAsNumpy(),
            }

            df = pd.DataFrame(hourly_data)
            all_results.append(df)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ {row['city']}. –ñ–¥—ë–º {delay} —Å–µ–∫...")
            time.sleep(delay)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ—Ä–æ–¥–∞ {row['city']}: {e}")
            if all_results:
                print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                new_df = pd.concat(all_results, ignore_index=True)
                if os.path.exists(output_path):
                    existing_df = pd.read_csv(output_path)
                    final_df = pd.concat([existing_df, new_df], ignore_index=True)
                else:
                    final_df = new_df
                final_df.to_csv(output_path, index=False)
                print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
            else:
                print("‚ö† –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
            break

    else:
        if all_results:
            new_df = pd.concat(all_results, ignore_index=True)
            if os.path.exists(output_path):
                existing_df = pd.read_csv(output_path)
                final_df = pd.concat([existing_df, new_df], ignore_index=True)
            else:
                final_df = new_df
            final_df.to_csv(output_path, index=False)
            print(f"üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
        else:
            print("‚ö† –ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

if __name__ == "__main__":
    main()
